---
# tasks file for ansible-role-arc-frontend
#

#- name: copy nordugrid.repo file
#  template: src=nordugrid.repo.j2 dest=/etc/yum.repos.d/nordugrid.repo owner=root mode=0644 
#
- name: install nordugrid repo
  yum: pkg=http://download.nordugrid.org/packages/nordugrid-release/releases/{{ arc_frontend_release }}/centos/el7/x86_64/nordugrid-release-{{ arc_frontend_release }}-1.el7.centos.noarch.rpm
  
- name: install nordugrid rpm key
  rpm_key: key=http://download.nordugrid.org/RPM-GPG-KEY-nordugrid state=present

- name: update all the things
  yum: name=* state=latest

- name: install Nordugrid ARC packages
  yum: name={{ item }} state=present
  with_items: arc_frontend_packages | default({})

- name: check if there's a nordugrid.repo.rpmnew
  stat: path=/etc/yum.repos.d/nordugrid.repo.rpmnew
  register: arc_frontend_rpmnew_stat

- name: Replace old nordugrid.repo
  command: mv /etc/yum.repos.d/nordugrid.repo.rpmnew /etc/yum.repos.d/nordugrid.repo
  when: arc_frontend_rpmnew_stat.stat.exists

- name: Create Grid dir 
  file: path={{ griddir }} state=directory owner=root mode=0755

- name: Create Session dir 
  file: path={{ sessiondir }} state=directory owner=nobody group=nobody mode=0755

- name: Create Runtime dir 
  file: path={{ runtimedir }} state=directory owner=root mode=0755

- name: Create Cache dir 
  file: path={{ cachedir }} state=directory owner=root mode=0755

- name: Create UnixGroup for OPS dir 
  file: path={{ unixgroup_dir_ops }} state=directory owner=root mode=0755

- name: Populate ops pool file
  lineinfile: dest="{{ unixgroup_dir_ops }}/pool" line={{ item }} create=yes state=present
  with_sequence: start=0 end={{ ops_acct_nr }} format={{ group_name_ops }}%03d

- name: Populate fgi pool file
  lineinfile: dest="{{ unixgroup_dir_fgi }}/pool" line={{ item }} create=yes state=present
  with_sequence: start=0 end={{ fgi_acct_nr }} format={{ group_name_fgi }}%03d

- name: Create UnixGroup for FGI dir 
  file: path={{ unixgroup_dir_fgi }} state=directory owner=root mode=0755

- name: Create gridops group
  group: name={{ group_name_ops }} state=present
  delegate_to: install

- name: Create gridfgi group
  group: name={{ group_name_fgi }} state=present
  delegate_to: install
          
- name: Create OPS home dir 
  file: path="{{ griddir }}/{{ group_name_ops }}" state=directory owner=root mode=0755

- name: Create FGI home dir 
  file: path="{{ griddir }}/{{ group_name_fgi }}" state=directory owner=root mode=0755

- name: Create generic gridnull user
  user: name=gridnull state=present home="{{ griddir }}/gridnull" createhome=no
  delegate_to: install

- name: Create generic grid user
  user: name=grid state=present home="{{ griddir }}/grid"
  delegate_to: install

- name: Create Grid users for OPS
  user: name={{ item }} state=present home="{{ griddir }}/{{ group_name_ops }}" groups={{ group_name_ops }} createhome=no
  with_sequence: start=0 end={{ ops_acct_nr }} format={{ group_name_ops }}%03d
  delegate_to: install

- name: Create Grid users for FGI
  user: name={{ item }} state=present home="{{ griddir }}/{{ group_name_fgi }}" groups={{ group_name_fgi }} createhome=no
  with_sequence: start=0 end={{ fgi_acct_nr }} format={{ group_name_fgi }}%03d
  delegate_to: install

- name: Update NIS DB
  command: /usr/bin/make -C /var/yp
  delegate_to: install
  when: arc_frontend_nis

- name: Create Slurm user account for OPS 1/2
  command: /usr/bin/sacctmgr -i add account {{ group_name_ops }}
  delegate_to: install
  when: add_slurm_accts
  ignore_errors: yes

- name: Create Slurm user account for OPS 2/2
  command: /usr/bin/sacctmgr -i add user name={{ item }} account={{group_name_ops }}
  with_sequence: start=0 end={{ ops_acct_nr }} format={{ group_name_ops }}%03d
  delegate_to: install
  when: add_slurm_accts
  ignore_errors: yes

- name: Create Slurm user account for FGI 1/2
  command: /usr/bin/sacctmgr -i add account {{ group_name_fgi }}
  delegate_to: install
  when: add_slurm_accts
  ignore_errors: yes

- name: Create Slurm user account for FGI 2/2
  command: /usr/bin/sacctmgr -i add user name={{ item }} account={{group_name_fgi }}
  with_sequence: start=0 end={{ fgi_acct_nr }} format={{ group_name_fgi }}%03d
  delegate_to: install
  when: add_slurm_accts
  ignore_errors: yes

- name: Template arc.conf file
  template: backup=yes src=arc.conf.j2 dest=/etc/arc.conf owner=root mode=0644 

- name: start and enable arc frontend services
  service: name={{ item }} state=started enabled=yes
  with_items: arc_frontend_services | default({})
  when: arc_frontend_services.0 != ""

- name: Create cron job that copies runtime apps from CVMFS
  cron: name="copy runtime" minute=0 hour=6
        user="root" job="/usr/bin/cp -r -u /cvmfs/fgi.csc.fi/runtimes/sl6/current/* /scratch/grid/runtime/"
        cron_file=ansible_copyRuntime
